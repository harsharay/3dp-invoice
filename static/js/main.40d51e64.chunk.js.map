{"version":3,"sources":["Firebase/Firebase.utils.js","Components/Invoice/Invoice.jsx","Components/Button/Button.jsx","Components/Input/Input.jsx","Components/FirebaseData/FirebaseData.jsx","Components/Form/Form.jsx","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","firestore","Invoice","onClick","details","productName","quantity","indiPrice","address","totalPrice","finalPrice","now","Date","invoiceNumber","getFullYear","getMonth","getHours","getMinutes","getSeconds","handleFirestoreAdd","a","collection","add","createdAt","name","pricePerQuantity","className","toUpperCase","Button","buttonValue","Input","inputName","labelName","inputType","onChange","value","htmlFor","type","FirebaseData","useState","data","setData","getFirebaseData","get","response","docs","map","item","console","log","useEffect","displayData","index","length","style","marginLeft","Form","displayInvoice","displayFirebaseData","setDetails","handleChange","e","fieldName","target","newValue","prevValue","cols","rows","alert","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.40d51e64.chunk.js","sourcesContent":["import firebase from \"firebase/app\"\r\nimport \"firebase/auth\"\r\nimport \"firebase/firestore\"\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyAAvuA7BTJRVFRym3cRHHzwfPIM3NaCTP0\",\r\n    authDomain: \"crwn-db-b2bb7.firebaseapp.com\",\r\n    databaseURL: \"https://crwn-db-b2bb7.firebaseio.com\",\r\n    projectId: \"crwn-db-b2bb7\",\r\n    storageBucket: \"crwn-db-b2bb7.appspot.com\",\r\n    messagingSenderId: \"281711477222\",\r\n    appId: \"1:281711477222:web:7f1a80f4d9c5158ff89627\"\r\n  };\r\n  // Initialize Firebase\r\nfirebase.initializeApp(config);\r\n\r\n\r\nexport const auth = firebase.auth()\r\nexport const firestore = firebase.firestore()","import React from 'react'\r\n\r\nimport \"./Invoice.styles.css\"\r\nimport { firestore } from \"../../Firebase/Firebase.utils\"\r\n\r\nfunction Invoice({ onClick, details }) {\r\n\r\n    let { productName, quantity, indiPrice, address } = details\r\n\r\n    let totalPrice = quantity * indiPrice\r\n    let finalPrice = totalPrice + (totalPrice*0.18)\r\n\r\n    //InvoiceNumber\r\n    let now = new Date()\r\n    let invoiceNumber = `${now.getFullYear()}${now.getMonth()}${now.getHours()}${now.getMinutes()}${now.getSeconds()}`\r\n\r\n\r\n    const handleFirestoreAdd = async () => {\r\n        await firestore.collection(\"invoices\").add({\r\n            address: address,\r\n            createdAt: now,\r\n            finalPrice: finalPrice,\r\n            name: productName,\r\n            pricePerQuantity: indiPrice,\r\n            quantity: quantity,\r\n            invoiceNumber: invoiceNumber\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"display-invoice\">\r\n            <div className=\"invoice-container\">\r\n                <p className=\"close\" onClick={onClick}>CLOSE</p>\r\n                <h2>Invoice</h2>\r\n                <p><span>{productName.toUpperCase()}</span></p>\r\n                <p>Quantity: <span>{quantity}</span></p>\r\n                <p>Price per item: <span>₹{indiPrice}</span></p>\r\n                <p>Total Price: <span>₹{totalPrice}</span></p>\r\n                <p>Final Price with GST(18%) added: <span>₹{finalPrice}</span></p>\r\n                <p>Invoice Number: <span>{invoiceNumber}</span></p>\r\n                <p>Address of the customer: <span>{address}</span></p>\r\n                <button onClick={handleFirestoreAdd} className=\"firebase-button\">Add to Database</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Invoice\r\n","import React from 'react'\r\n\r\nimport \"./Button.styles.css\"\r\n\r\nfunction Button({ buttonValue, onClick }) {\r\n    return (\r\n        <div>\r\n            <button onClick={onClick}>{buttonValue}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button\r\n","import React from \"react\"\r\n\r\nimport \"./Input.styles.css\"\r\n\r\nconst Input = ({ inputName, labelName, inputType, onChange, value, ...additionalData }) => {\r\n    return (\r\n        <div className=\"form-element\">\r\n            <label htmlFor={inputName}>{labelName}</label><br/>\r\n            <input type={inputType} name={inputName} value={value} onChange={onChange}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;","import React,{ useState, useEffect } from 'react'\r\n\r\nimport \"./FirebaseData.styles.css\"\r\n\r\nimport { firestore } from \"../../Firebase/Firebase.utils\"\r\n\r\nfunction FirebaseData({ onClick }) {\r\n\r\n    const [data,setData] = useState([])\r\n\r\n    const getFirebaseData = async () => {\r\n        let response = await firestore.collection(\"invoices\").get()\r\n        response.docs.map(item => console.log(item.data()))\r\n        setData(response.docs)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getFirebaseData()\r\n    },[])\r\n\r\n    const displayData = data.map((item,index) => {\r\n        let { name, invoiceNumber, quantity, pricePerQuantity, finalPrice, address } = item.data()\r\n        return (\r\n            <div className=\"card\">\r\n                <h1>{index+1}.{name.toUpperCase()}</h1>\r\n                <p>Quantity:{quantity}</p>\r\n                <p>Price per item:₹{pricePerQuantity}</p>\r\n                <p>Final Price with GST(18%) added:₹{finalPrice}</p>\r\n                <p>Invoice Number:{invoiceNumber}</p>\r\n                <p>Address of the customer:{address}</p>\r\n            </div>\r\n        )\r\n    })\r\n\r\n\r\n    return (\r\n        <div className=\"firebase-data\">\r\n            <div className=\"invoices-header\">\r\n                <p className=\"close\" onClick={onClick}>CLOSE</p>\r\n                <h1>Invoices so far...</h1>\r\n            </div>\r\n            <div className=\"card-grid\">\r\n                {data.length>0\r\n                ?\r\n                displayData\r\n                :\r\n                <h1 style={{ marginLeft: \"135%\" }}>Loading...</h1>\r\n                 }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FirebaseData\r\n","import React,{ useState } from \"react\"\r\n\r\nimport Invoice from \"../Invoice/Invoice\"\r\n\r\nimport Button from \"../Button/Button\"\r\n\r\nimport \"./Form.styles.css\"\r\n\r\nimport Input from \"../Input/Input\"\r\n\r\nimport FirebaseData from \"../FirebaseData/FirebaseData\"\r\n\r\nconst Form = () => {\r\n\r\n    const [details, setDetails] = useState({\r\n        productName: \"\",\r\n        quantity: 0,\r\n        indiPrice: 0,\r\n        finalPrice: 0,\r\n        address: \"\",\r\n        displayInvoice: false,\r\n        displayFirebaseData: false\r\n    })\r\n\r\n    const handleChange = e => {\r\n        let fieldName = e.target.name\r\n        let newValue = e.target.value\r\n        setDetails(prevValue => {\r\n            if(fieldName===\"productName\"){\r\n                return {\r\n                    ...prevValue,\r\n                    productName : newValue\r\n                }\r\n            } else if(fieldName===\"quantity\"){\r\n                return {\r\n                    ...prevValue,\r\n                    quantity: newValue\r\n                }\r\n            } else if(fieldName===\"indiPrice\"){\r\n                return {\r\n                    ...prevValue,\r\n                    indiPrice : newValue\r\n                }\r\n            } else if(fieldName===\"address\"){\r\n                return {\r\n                    ...prevValue,\r\n                    address : newValue\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleInvoice = () => {\r\n        if(details.productName.length>0 && details.quantity>0 && details.indiPrice>0 && details.address.length>0){\r\n            setDetails(prevValue => {\r\n                return {\r\n                    ...prevValue,\r\n                    displayInvoice: !details.displayInvoice\r\n                }\r\n            })\r\n        } else {\r\n            alert(\"Enter all the details to proceed further\")\r\n        }\r\n    }\r\n\r\n    const handleFirebase = () => {\r\n        setDetails(prevValue => {\r\n            return {\r\n                ...prevValue,\r\n                displayFirebaseData : !details.displayFirebaseData\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleCloseInvoice = () => {\r\n        setDetails(prevValue => {\r\n           return {\r\n            ...prevValue,\r\n            displayInvoice : !details.displayInvoice\r\n           }\r\n        })\r\n    }\r\n\r\n    const handleCloseFirebase = () => {\r\n        setDetails(prevValue => {\r\n            return {\r\n                ...prevValue,\r\n                displayFirebaseData : !details.displayFirebaseData\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"form\">\r\n            <h1>Fill this form</h1>\r\n            <Input inputName=\"productName\" inputType=\"text\" labelName=\"Product Name\" onChange={handleChange} value={details.productName}/>\r\n            <Input inputName=\"quantity\" inputType=\"number\" labelName=\"Quantity\" onChange={handleChange} value={details.quantity}/>\r\n            <Input inputName=\"indiPrice\" inputType=\"number\" labelName=\"Individual Price\" onChange={handleChange} value={details.indiPrice}/>\r\n            <label htmlFor=\"address\" className=\"address-label\">Address</label>\r\n            <textarea  name=\"address\" cols=\"24\" rows=\"8\" onChange={handleChange} value={details.address}></textarea>\r\n            <div className=\"button-group\">\r\n                <Button buttonValue=\"Get the invoice\" onClick={handleInvoice}/>\r\n                <Button buttonValue=\"View Data from Firebase\" onClick={handleFirebase}/>\r\n            </div>\r\n            {details.displayInvoice \r\n            ?\r\n            <Invoice onClick={handleCloseInvoice} details={details}/>\r\n            :\r\n            null}\r\n            {details.displayFirebaseData ?\r\n            <FirebaseData onClick={handleCloseFirebase}/>\r\n            :\r\n            null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\n\nimport Form from \"./Components/Form/Form\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <header>\n        <h1>Invoice</h1>\n      </header>\n      <Form />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}